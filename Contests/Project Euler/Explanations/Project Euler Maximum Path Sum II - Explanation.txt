Same DP as the first part ... Only the size of the matrix changed.

-------------------------------------------------

Max_sum_from_here(i, j) = T(i, j), if i = n i.e. last row the max sum possible is the element itself
                        
                        = T(i, j) + max{ max_sum_from_here(i + 1, j), max_sum_from_here(i + 1, j + 1) }, otherwise

This algorithm works because we're going from the bottom to the top and we're being greedy while we're doing it. 

-----------------------------------------------------------------------
//Initialising the last row
    for(i = 1; i <= number_of_rows; i++)
        max_sum_starting_here[number_of_rows][i] = triangle[number_of_rows][i];

    for(i = number_of_rows - 1; i >= 1; i--)
    {
        for(j = 1; j <= i; j++)
        {
            max_sum_starting_here[i][j] =triangle[i][j] + max(max_sum_starting_here[i + 1][j], max_sum_starting_here[i + 1][j + 1]);
        }
    }

    printf("%d\n", max_sum_starting_here[1][1]);