
In T_n n <= sqrt(T_n),

in T_n <= 1e18, then n <= 1e9

Since the triangular numbers are monotonically increasing, 

I used binary search to see if T_n is a triangular number.

(The numbers shouldn't be stored in an array. Too much memory, but we know T(n) = n(n + 1)/2 so we get it in O(1) time anyway)

---------------------------------------------------------------------

void solve()
{
    long long triangular_n;
    scanf("%lld", &triangular_n);

    int low = 1, high = 1e9;
    int index = -1;

    while(low <= high)
    {
        int mid = (low + high) >> 1;

        long long n = mid;
        long long t_n = (n*(n + 1))/2;

        if(t_n == triangular_n)
        {
            index = mid; break;
        }
        else if(t_n < triangular_n)
            low = mid + 1;
        else
            high = mid - 1;
    }

    printf("%d\n", index);
}
