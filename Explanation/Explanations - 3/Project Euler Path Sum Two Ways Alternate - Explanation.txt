I've used a different kind of DP here....

min(i, j) holds the minimum sum ENDING here, rather than starting here ...

The advantage of this is that it can be done parallely with the input ... (For ending, you have to read the entire input first.) 
So, there are less lines of code and such.

--------------------------

min(1, 1) = m(1, 1)

For all other i, j there are two options, either we end in (i, j) from (i, j - 1) or (i - 1, j)

---------------------------------

    #define INFINITY 1LL << 38

    for(row = 0; row <= order_of_matrix; row++)
        for(column = 0; column <= order_of_matrix; column++)
           min_sum_ending_here[row][column] = INFINITY;

    for(row = 1; row <= order_of_matrix; row++)
    {
        for(column = 1; column <= order_of_matrix; column++)
        {
            scanf("%d", &matrix[row][column]);

            if(row == 1 && column == 1)
                min_sum_ending_here[row][column] = matrix[row][column];
            else
                min_sum_ending_here[row][column] = matrix[row][column] + min(min_sum_ending_here[row - 1][column], min_sum_ending_here[row][column - 1]);
        }
    }

    printf("%lld\n", min_sum_ending_here[order_of_matrix][order_of_matrix]);