The question asks for three operations on stacks - push, pop and display maximum. 

Here's the idea - 
	1. Use a parallel stack which keeps track of maximum.
	
	2. If the element being pushed is greater than or equal to the top of max stack, the element should be pushed on to the max stack as well.
		Note - If the max stack is empty, than any element is considered to be greater than the top of max stack.

	3. If the element at the top of the max stack is equal to the top of the stack, then they both should be popped together. 

-----------------------------------------------------

A mistake I made was 
	if(ele > max_stack[top_of_max_stack] || top_of_max_stack = -1)
		max_stack[++top_of_max_stack] = ele,

When It should be 
	if(ele >= max_stack[top_of_max_stack] || top_of_max_stack = -1)
		max_stack[++top_of_max_stack] = ele,

For example, let us consider x is at the top of max_stack, and now we push 5 x's at the top of the base stack.
	The first time we pop, we also pop the top of max stack. 

	Now, there are 5 x's remaining in the stack and x is the maximum element but it is not present at the top of the max_stack because we only pushed one copy of it.
	That's why it's important to push an element to top of max stack if it's greater than OR equal to the top of the stack.